let user = null;
let bgMusic = new Audio("https://vgmsite.com/soundtracks/wwf-super-wrestlemania-snes/hyynklsx/09%20Sid%20Justice.mp3");
bgMusic.loop = true;
bgMusic.volume = 0.5;
let isMuted = false;

function toggleMute() {
  isMuted = !isMuted;
  bgMusic.muted = isMuted;
  document.getElementById('mute-btn').innerText = isMuted ? 'ðŸ”‡' : 'ðŸ”Š';
}

function toggleAuth(section) {
  ['register', 'login', 'recovery'].forEach(id => {
    const el = document.getElementById(id);
    if (el) el.style.display = 'none';
  });
  const el = document.getElementById(section);
  if (el) el.style.display = 'block';
}

function register() {
  const username = document.getElementById('reg-username').value.trim();
  const email = document.getElementById('reg-email').value.trim();
  const password = document.getElementById('reg-password').value;
  const security = document.getElementById('reg-security').value.trim();

  if (localStorage.getItem(`user-${email}`)) {
    alert('Email already registered.');
    return;
  }

  const newUser = {
    username,
    email,
    password,
    security,
    stats: { wins: 0, losses: 0, total: 0 },
    games: [],
  };

  localStorage.setItem(`user-${email}`, JSON.stringify(newUser));
  alert('Registered successfully!');
  toggleAuth('login');
}

function login() {
  const email = document.getElementById('login-email').value.trim();
  const password = document.getElementById('login-password').value;

  const stored = localStorage.getItem(`user-${email}`);
  if (!stored) return alert('No account found.');

  const userData = JSON.parse(stored);
  if (userData.password !== password) return alert('Incorrect password.');

  localStorage.setItem('loggedIn', email);
  user = userData;
  initApp();
}

function recover() {
  const email = document.getElementById('recover-email').value.trim();
  const security = document.getElementById('recover-security').value.trim();
  const stored = localStorage.getItem(`user-${email}`);
  if (!stored) return alert('No account found.');

  const userData = JSON.parse(stored);
  if (userData.security.toLowerCase() === security.toLowerCase()) {
    alert(`Username: ${userData.username}\nPassword: ${userData.password}`);
  } else {
    alert('Incorrect recovery answer.');
  }
}

function logout() {
  localStorage.removeItem('loggedIn');
  user = null;

  // Hide app, show auth (login) section
  document.getElementById('app').style.display = 'none';
  document.getElementById('auth').style.display = 'block';

  // Show login form on logout
  toggleAuth('login');
}

function initApp() {
  document.getElementById('auth').style.display = 'none';
  document.getElementById('app').style.display = 'block';

  // Show dashboard view by default
  switchView('dashboard');

  document.getElementById('user-welcome').innerText = `Welcome, ${user.username}!`;

  loadUserData();

  // Attach event listeners for nav buttons
  document.getElementById('btn-dashboard').onclick = () => switchView('dashboard');
  document.getElementById('btn-record').onclick = () => switchView('record');
  document.getElementById('btn-stats').onclick = () => {
    switchView('stats');
    updateStatsChart();
    updateGamesChart();
  };
  document.getElementById('btn-map').onclick = () => switchView('map');

  document.getElementById('mute-btn').onclick = toggleMute;
  document.getElementById('logout-btn').onclick = logout;

  bgMusic.play().catch(() => {});
}

function switchView(viewName) {
  document.querySelectorAll('.view').forEach(view => {
    view.style.display = 'none';
  });
  const view = document.getElementById(`${viewName}-view`);
  if (view) view.style.display = 'block';
}

function getUserData() {
  const stored = localStorage.getItem(`user-${user.email}`);
  return stored ? JSON.parse(stored) : null;
}

function saveUserData(data) {
  localStorage.setItem(`user-${user.email}`, JSON.stringify(data));
  user = data;
}

function loadUserData() {
  const list = document.getElementById('game-list');
  list.innerHTML = '';
  if (!user.games.length) {
    list.textContent = 'No games recorded yet.';
    return;
  }
  user.games.forEach(game => {
    const li = document.createElement('li');
    li.textContent = `${game.opponent} | ${game.gameType} | Race to ${game.raceTo} | ${game.won ? 'Win' : 'Loss'} | ${game.date} | Final Score: ${game.yourScore} - ${game.opponentScore}`;
    list.appendChild(li);
  });
}

document.getElementById('game-form').onsubmit = e => {
  e.preventDefault();

  const yourScore = parseInt(document.getElementById('yourScore').value);
  const opponentScore = parseInt(document.getElementById('opponentScore').value);

  const game = {
    opponent: document.getElementById('opponent').value,
    gameType: document.getElementById('gameType').value,
    raceTo: parseInt(document.getElementById('raceTo').value),
    date: document.getElementById('dateTime').value,
    won: document.getElementById('won').value === 'true',
    yourScore: yourScore,
    opponentScore: opponentScore,
  };

  user.games.push(game);
  if (game.won) user.stats.wins++;
  else user.stats.losses++;
  user.stats.total++;
  saveUserData(user);
  loadUserData();
  e.target.reset();
};

document.getElementById('reset-data').onclick = () => {
  if (confirm('Reset all records?')) {
    user.stats = { wins: 0, losses: 0, total: 0 };
    user.games = [];
    saveUserData(user);
    loadUserData();
  }
};

document.getElementById('load-data').onclick = () => {
  user = getUserData();
  loadUserData();
};

function updateStatsChart() {
  const ctx = document.getElementById('statsChart').getContext('2d');
  new Chart(ctx, {
    type: 'pie',
    data: {
      labels: ['Wins', 'Losses'],
      datasets: [{
        data: [user.stats.wins, user.stats.losses],
        backgroundColor: ['green', 'red']
      }]
    }
  });
}

function updateGamesChart() {
  const ctx = document.getElementById('gamesChart').getContext('2d');
  const total = user.stats.total || 1;
  new Chart(ctx, {
    type: 'bar',
    data: {
      labels: ['Win %'],
      datasets: [{
        label: 'Win %',
        data: [((user.stats.wins / total) * 100).toFixed(1)],
        backgroundColor: 'blue'
      }]
    }
  });
}

function initMap() {
  const loc = document.getElementById('map-location').value;
  const geocoder = new google.maps.Geocoder();
  geocoder.geocode({ address: loc }, (res, status) => {
    if (status === 'OK') {
      const map = new google.maps.Map(document.getElementById('map'), {
        center: res[0].geometry.location,
        zoom: 12
      });
      const service = new google.maps.places.PlacesService(map);
      service.nearbySearch({
        location: res[0].geometry.location,
        radius: 5000,
        keyword: 'pool hall'
      }, (results, status) => {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          results.forEach(place => {
            new google.maps.Marker({
              map,
              position: place.geometry.location,
              title: place.name
            });
          });
        }
      });
    } else {
      alert('Geocode failed: ' + status);
    }
  });
}

window.onload = () => {
  const email = localStorage.getItem('loggedIn');
  if (email && localStorage.getItem(`user-${email}`)) {
    user = JSON.parse(localStorage.getItem(`user-${email}`));
    initApp();
  } else {
    toggleAuth('register');
  }
};
